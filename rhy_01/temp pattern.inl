
//0
lamb(0, 0.0);
lamb(0, 1.5);
lamb(3, 2.0);
lamb(3, 2.5);
lamb(1, 3.0);
lamb(2, 3.5);
lamb(1, 4.0);

lamb(3, 6.5);
lamb(0, 7.5);
lamb(0, 8.0);
lamb(0, 9.5);
lamb(3, 10.0);
lamb(3, 10.5);
lamb(1, 11.0);
lamb(2, 11.5);
lamb(1, 12.0);

lamb(0, 15.5);
lamb(0, 16 + 0.0);
lamb(0, 16 + 1.5);
lamb(3, 16 + 2.0);
lamb(3, 16 + 2.5);
lamb(1, 16 + 3.0);
lamb(2, 16 + 3.5);
lamb(1, 16 + 4.0);

lamb(3, 16 + 6.5);
lamb(0, 16 + 7.5);
lamb(0, 16 + 8.0);
lamb(0, 16 + 9.5);
lamb(3, 16 + 10.0);
lamb(3, 16 + 10.5);
lamb(1, 16 + 11.0);
lamb(2, 16 + 11.5);
lamb(1, 16 + 12.0);

//2	 
lamb(0, 32 + 0.5 * 0);
lamb(1, 32 + 0.5 * 1);
lamb(2, 32 + 0.5 * 2);
lamb(3, 32 + 0.5 * 3);
lamb(2, 32 + 0.5 * 4);
lamb(1, 32 + 0.5 * 5);
lamb(0, 32 + 0.5 * 6);
lamb(1, 32 + 0.5 * 7);
lamb(0, 32 + 0.5 * 8);
lamb(3, 32 + 0.5 * 9);
lamb(2, 32 + 0.5 * 10);
lamb(3, 32 + 0.5 * 11);
lamb(1, 32 + 0.5 * 12);
lamb(2, 32 + 0.5 * 13);
lamb(0, 32 + 0.5 * 14);
lamb(1, 32 + 0.5 * 14.5);
lamb(2, 32 + 0.5 * 15);
lamb(3, 32 + 0.5 * 15.5);

lamb(0, 32 + 0.5 * 16);
lamb(1, 32 + 0.5 * 16);
lamb(0, 32 + 0.5 * 18);
lamb(1, 32 + 0.5 * 18);
lamb(2, 32 + 0.5 * 20);
lamb(3, 32 + 0.5 * 20);
lamb(2, 32 + 0.5 * 22);
lamb(3, 32 + 0.5 * 22);

lamb(0, 32 + 0.5 * 24);
lamb(1, 32 + 0.5 * 24.5);
lamb(2, 32 + 0.5 * 25);
lamb(3, 32 + 0.5 * 25.5);
lamb(0, 32 + 0.5 * 26);
lamb(1, 32 + 0.5 * 26.5);
lamb(2, 32 + 0.5 * 27);
lamb(3, 32 + 0.5 * 27.5);
lamb(0, 32 + 0.5 * 28);
lamb(1, 32 + 0.5 * 28.5);
lamb(2, 32 + 0.5 * 29);
lamb(3, 32 + 0.5 * 29.5);
lamb(0, 32 + 0.5 * 30);
lamb(1, 32 + 0.5 * 30.5);
lamb(2, 32 + 0.5 * 31);
lamb(3, 32 + 0.5 * 31.5);

//3	 
lamb(0, 48 + 0.5 * 0);
lamb(0, 48 + 0.5 * 2);
lamb(3, 48 + 0.5 * 2);
lamb(0, 48 + 0.5 * 3);
lamb(0, 48 + 0.5 * 5);
lamb(0, 48 + 0.5 * 6);
lamb(3, 48 + 0.5 * 6);
lamb(0, 48 + 0.5 * 7);

lamb(0, 48 + 0.5 * 8);
lamb(1, 48 + 0.5 * 8.66);
lamb(2, 48 + 0.5 * 9.33);
lamb(0, 48 + 0.5 * 10);
lamb(1, 48 + 0.5 * 10.66);
lamb(3, 48 + 0.5 * 11.33);
lamb(0, 48 + 0.5 * 12);
lamb(2, 48 + 0.5 * 12.66);
lamb(3, 48 + 0.5 * 13.33);
lamb(1, 48 + 0.5 * 14);
lamb(2, 48 + 0.5 * 14.66);
lamb(3, 48 + 0.5 * 15.33);


lamb(0, 56 + 0.5 * 0);
lamb(0, 56 + 0.5 * 2);
lamb(3, 56 + 0.5 * 2);
lamb(3, 56 + 0.5 * 3);
lamb(3, 56 + 0.5 * 5);
lamb(0, 56 + 0.5 * 6);
lamb(3, 56 + 0.5 * 6);
lamb(3, 56 + 0.5 * 7);

lamb(3, 56 + 0.5 * 8);
lamb(2, 56 + 0.5 * 8.66);
lamb(1, 56 + 0.5 * 9.33);
lamb(3, 56 + 0.5 * 10);
lamb(2, 56 + 0.5 * 10.66);
lamb(0, 56 + 0.5 * 11.33);
lamb(3, 56 + 0.5 * 12);
lamb(1, 56 + 0.5 * 12.66);
lamb(0, 56 + 0.5 * 13.33);
lamb(2, 56 + 0.5 * 14);
lamb(1, 56 + 0.5 * 14.66);
lamb(0, 56 + 0.5 * 15.33);

//4	 
lamb(1, 64 + 0.5 * 0);
lamb(1, 64 + 0.5 * 2);
lamb(2, 64 + 0.5 * 2);
lamb(1, 64 + 0.5 * 3);
lamb(0, 64 + 0.5 * 4);
lamb(0, 64 + 0.5 * 5);
lamb(1, 64 + 0.5 * 5);
lamb(0, 64 + 0.5 * 6);
lamb(1, 64 + 0.5 * 6);
lamb(2, 64 + 0.5 * 6);
lamb(3, 64 + 0.5 * 7);

lamb(0, 64 + 0.5 * 8);
lamb(1, 64 + 0.5 * 8.66);
lamb(2, 64 + 0.5 * 9.33);
lamb(3, 64 + 0.5 * 10);
lamb(3, 64 + 0.5 * 10.66);
lamb(3, 64 + 0.5 * 11.33);
lamb(1, 64 + 0.5 * 12);
lamb(2, 64 + 0.5 * 12.66);
lamb(3, 64 + 0.5 * 13.33);
lamb(0, 64 + 0.5 * 14);
lamb(0, 64 + 0.5 * 14.66);
lamb(0, 64 + 0.5 * 15.33);

lamb(1, 72 + 0);
lamb(2, 72 + 0);
lamb(0, 72 + 1.00);
lamb(2, 72 + 1.25);
lamb(1, 72 + 1.50);
lamb(3, 72 + 1.75);
lamb(0, 72 + 2.00);
lamb(2, 72 + 2.25);
lamb(1, 72 + 2.50);
lamb(3, 72 + 2.75);
lamb(0, 72 + 3.00);
lamb(2, 72 + 3.25);
lamb(1, 72 + 3.50);
lamb(3, 72 + 3.75);

lamb(0, 76 + 0);
lamb(1, 76 + 0);
lamb(0, 76 + 1.0);
lamb(1, 76 + 1.33);
lamb(2, 76 + 1.66);
lamb(2, 76 + 2);
lamb(3, 76 + 2);
lamb(1, 76 + 3.00);
lamb(2, 76 + 3.33);
lamb(3, 76 + 3.66);

//5	 
lamb(0, 80 + 0.5 * 0);
lamb(1, 80 + 0.5 * 0);
lamb(0, 80 + 0.5 * 2);
lamb(1, 80 + 0.5 * 2);
lamb(0, 80 + 0.5 * 3);
lamb(1, 80 + 0.5 * 3);
lamb(0, 80 + 0.5 * 5);
lamb(1, 80 + 0.5 * 5);
lamb(0, 80 + 0.5 * 6);
lamb(1, 80 + 0.5 * 7);
lamb(2, 80 + 0.5 * 8);
lamb(3, 80 + 0.5 * 8);
lamb(1, 80 + 0.5 * 9);
lamb(2, 80 + 0.5 * 10);
lamb(0, 80 + 0.5 * 11);
lamb(1, 80 + 0.5 * 11);
lamb(0, 80 + 0.5 * 13);
lamb(1, 80 + 0.5 * 13);
lamb(1, 80 + 0.5 * 14);
lamb(2, 80 + 0.5 * 15);

lamb(2, 80 + 0.5 * 16);
lamb(3, 80 + 0.5 * 16);
lamb(0, 80 + 0.5 * 18);
lamb(3, 80 + 0.5 * 18);
lamb(0, 80 + 0.5 * 19);
lamb(1, 80 + 0.5 * 19);
lamb(2, 80 + 0.5 * 21);
lamb(3, 80 + 0.5 * 21);
lamb(2, 80 + 0.5 * 22);
lamb(3, 80 + 0.5 * 22);

lamb(0, 80 + 0.5 * 24);
lamb(1, 80 + 0.5 * 24.5);
lamb(2, 80 + 0.5 * 25);
lamb(3, 80 + 0.5 * 25.5);
lamb(2, 80 + 0.5 * 26);
lamb(1, 80 + 0.5 * 26.5);
lamb(0, 80 + 0.5 * 27);
lamb(1, 80 + 0.5 * 27.5);
lamb(2, 80 + 0.5 * 28);
lamb(3, 80 + 0.5 * 28.5);
lamb(2, 80 + 0.5 * 29);
lamb(1, 80 + 0.5 * 29.5);
lamb(0, 80 + 0.5 * 30);
lamb(1, 80 + 0.5 * 30.5);
lamb(2, 80 + 0.5 * 31);
lamb(3, 80 + 0.5 * 31.5);

//6
lamb(0, 96 + 0.5 * 0);
lamb(1, 96 + 0.5 * 0);
lamb(3 - 0, 96 + 0.5 * 2);
lamb(3 - 1, 96 + 0.5 * 2);
lamb(3 - 0, 96 + 0.5 * 3);
lamb(3 - 1, 96 + 0.5 * 3);
lamb(3 - 0, 96 + 0.5 * 5);
lamb(3 - 1, 96 + 0.5 * 5);
lamb(3 - 0, 96 + 0.5 * 6);
lamb(3 - 1, 96 + 0.5 * 7);
lamb(3 - 2, 96 + 0.5 * 8);
lamb(3 - 3, 96 + 0.5 * 8);
lamb(3 - 1, 96 + 0.5 * 9);
lamb(3 - 2, 96 + 0.5 * 10);
lamb(3 - 0, 96 + 0.5 * 11);
lamb(3 - 1, 96 + 0.5 * 11);
lamb(3 - 0, 96 + 0.5 * 13);
lamb(3 - 1, 96 + 0.5 * 13);
lamb(3 - 1, 96 + 0.5 * 14);
lamb(3 - 2, 96 + 0.5 * 15);

lamb(0, 104 + 0.25 * 0);
lamb(1, 104 + 0.25 * 1);
lamb(2, 104 + 0.25 * 2);
lamb(3, 104 + 0.25 * 3);
lamb(2, 104 + 0.25 * 4);
lamb(1, 104 + 0.25 * 5);
lamb(0, 104 + 0.25 * 6);
lamb(1, 104 + 0.25 * 7);
lamb(2, 104 + 0.25 * 8);
lamb(3, 104 + 0.25 * 9);
lamb(2, 104 + 0.25 * 10);
lamb(1, 104 + 0.25 * 11);
lamb(0, 104 + 0.25 * 12);
lamb(1, 104 + 0.25 * 13);
lamb(2, 104 + 0.25 * 14);
lamb(3, 104 + 0.25 * 15);
lamb(2, 104 + 0.25 * 16);
lamb(1, 104 + 0.25 * 17);
lamb(0, 104 + 0.25 * 18);
lamb(1, 104 + 0.25 * 19);
lamb(2, 104 + 0.25 * 20);
lamb(3, 104 + 0.25 * 21);
lamb(2, 104 + 0.25 * 22);
lamb(1, 104 + 0.25 * 23);
lamb(0, 104 + 0.25 * 24);
lamb(1, 104 + 0.25 * 25);
lamb(2, 104 + 0.25 * 26);
lamb(3, 104 + 0.25 * 27);
lamb(0, 104 + 0.25 * 28);
lamb(1, 104 + 0.25 * 29);
lamb(2, 104 + 0.25 * 30);
lamb(3, 104 + 0.25 * 31);

//7
lamb(0, 112 + 0.25 * 0);
lamb(1, 112 + 0.25 * 0);
lamb(0, 112 + 0.25 * 2);
lamb(1, 112 + 0.25 * 2);
lamb(3, 112 + 0.25 * 4);
lamb(2, 112 + 0.25 * 5);
lamb(1, 112 + 0.25 * 6);
lamb(0, 112 + 0.25 * 7);
lamb(2, 112 + 0.25 * 8);
lamb(3, 112 + 0.25 * 8);
lamb(0, 112 + 0.25 * 16);
lamb(1, 112 + 0.25 * 16);
lamb(0, 112 + 0.25 * 18);
lamb(1, 112 + 0.25 * 18);
lamb(3, 112 + 0.25 * 20);
lamb(2, 112 + 0.25 * 21);
lamb(1, 112 + 0.25 * 22);
lamb(0, 112 + 0.25 * 23);
lamb(2, 112 + 0.25 * 24);
lamb(3, 112 + 0.25 * 24);

lamb(0, 112 + 0.25 * 32);
lamb(1, 112 + 0.25 * 32);
lamb(0, 112 + 0.25 * 36);
lamb(1, 112 + 0.25 * 37);
lamb(2, 112 + 0.25 * 38);
lamb(3, 112 + 0.25 * 39);
lamb(2, 112 + 0.25 * 40);
lamb(3, 112 + 0.25 * 40);
lamb(3, 112 + 0.25 * 44);
lamb(2, 112 + 0.25 * 45);
lamb(1, 112 + 0.25 * 46);
lamb(0, 112 + 0.25 * 47);
lamb(0, 112 + 0.25 * 48);
lamb(1, 112 + 0.25 * 48);
lamb(0, 112 + 0.25 * 50);
lamb(1, 112 + 0.25 * 50);
lamb(0, 112 + 0.25 * 52);
lamb(1, 112 + 0.25 * 53);
lamb(2, 112 + 0.25 * 54);
lamb(3, 112 + 0.25 * 55);

lamb(0, 112 + 0.25 * 56);
lamb(1, 112 + 0.25 * 56);
lamb(2, 112 + 0.25 * 56);
lamb(3, 112 + 0.25 * 56);
lamb(1, 112 + 0.25 * 58);
lamb(2, 112 + 0.25 * 58);
lamb(3, 112 + 0.25 * 58);
lamb(2, 112 + 0.25 * 60);
lamb(3, 112 + 0.25 * 60);
lamb(3, 112 + 0.25 * 62);

//8
lamb(0, 128 + 0.25 * 0);
lamb(1, 128 + 0.25 * 0);
lamb(3 - 0, 128 + 0.25 * 2);
lamb(3 - 1, 128 + 0.25 * 2);
lamb(3 - 3, 128 + 0.25 * 4);
lamb(3 - 2, 128 + 0.25 * 5);
lamb(3 - 1, 128 + 0.25 * 6);
lamb(3 - 0, 128 + 0.25 * 7);
lamb(3 - 2, 128 + 0.25 * 8);
lamb(3 - 3, 128 + 0.25 * 8);
lamb(3 - 0, 128 + 0.25 * 16);
lamb(3 - 1, 128 + 0.25 * 16);
lamb(3 - 0, 128 + 0.25 * 18);
lamb(3 - 1, 128 + 0.25 * 18);
lamb(3 - 3, 128 + 0.25 * 20);
lamb(3 - 2, 128 + 0.25 * 21);
lamb(3 - 1, 128 + 0.25 * 22);
lamb(3 - 0, 128 + 0.25 * 23);
lamb(3 - 2, 128 + 0.25 * 24);
lamb(3 - 3, 128 + 0.25 * 24);

lamb(0, 136 + 0.33 * 0);
lamb(0, 136 + 0.33 * 1);
lamb(0, 136 + 0.33 * 2);
lamb(2, 136 + 0.33 * 3);
lamb(2, 136 + 0.33 * 4);
lamb(2, 136 + 0.33 * 5);
lamb(1, 136 + 0.33 * 6);
lamb(1, 136 + 0.33 * 7);
lamb(1, 136 + 0.33 * 8);
lamb(3, 136 + 0.33 * 9);
lamb(3, 136 + 0.33 * 10);
lamb(3, 136 + 0.33 * 11);

lamb(0, 140 + 0.5 * 0);
lamb(1, 140 + 0.5 * 0);
lamb(2, 140 + 0.5 * 0);
lamb(0, 140 + 0.5 * 1);
lamb(1, 140 + 0.5 * 1);
lamb(2, 140 + 0.5 * 1);
lamb(0, 140 + 0.5 * 2);
lamb(2, 140 + 0.5 * 2);
lamb(0, 140 + 0.5 * 3);
lamb(2, 140 + 0.5 * 3);
lamb(1, 140 + 0.5 * 4);
lamb(3, 140 + 0.5 * 4);
lamb(1, 140 + 0.5 * 5);
lamb(3, 140 + 0.5 * 5);
lamb(0, 140 + 0.5 * 6);
lamb(1, 140 + 0.5 * 6);
lamb(2, 140 + 0.5 * 6);
lamb(3, 140 + 0.5 * 6);
lamb(0, 140 + 0.5 * 7);
lamb(1, 140 + 0.5 * 7);
lamb(2, 140 + 0.5 * 7);
lamb(3, 140 + 0.5 * 7);

//9
lamb(0, 144 + 0.25 * 0);
lamb(3, 144 + 0.25 * 0);
lamb(0, 144 + 0.25 * 2);
lamb(3, 144 + 0.25 * 2);
lamb(0, 144 + 0.25 * 4);
lamb(1, 144 + 0.25 * 5);
lamb(2, 144 + 0.25 * 6);
lamb(3, 144 + 0.25 * 7);
lamb(0, 144 + 0.25 * 8);
lamb(1, 144 + 0.25 * 9);
lamb(2, 144 + 0.25 * 10);
lamb(3, 144 + 0.25 * 11);
lamb(0, 144 + 0.25 * 12);
lamb(1, 144 + 0.25 * 13);
lamb(2, 144 + 0.25 * 14);
lamb(3, 144 + 0.25 * 15);
lamb(0, 144 + 0.25 * 16);
lamb(1, 144 + 0.25 * 17);
lamb(2, 144 + 0.25 * 18);
lamb(3, 144 + 0.25 * 19);
lamb(0, 144 + 0.25 * 20);
lamb(1, 144 + 0.25 * 21);
lamb(2, 144 + 0.25 * 22);
lamb(3, 144 + 0.25 * 23);
lamb(0, 144 + 0.25 * 24);
lamb(1, 144 + 0.25 * 25);
lamb(2, 144 + 0.25 * 26);
lamb(3, 144 + 0.25 * 27);
lamb(0, 144 + 0.25 * 28);
lamb(1, 144 + 0.25 * 28);
lamb(2, 144 + 0.25 * 28);
lamb(3, 144 + 0.25 * 28);

lamb(0, 152 + 0.25 * 0);
lamb(3, 152 + 0.25 * 0);
lamb(0, 152 + 0.25 * 2);
lamb(3, 152 + 0.25 * 2);
lamb(0, 152 + 0.25 * 4);
lamb(2, 152 + 0.25 * 5);
lamb(1, 152 + 0.25 * 6);
lamb(3, 152 + 0.25 * 7);
lamb(0, 152 + 0.25 * 8);
lamb(2, 152 + 0.25 * 9);
lamb(1, 152 + 0.25 * 10);
lamb(3, 152 + 0.25 * 11);
lamb(0, 152 + 0.25 * 12);
lamb(2, 152 + 0.25 * 13);
lamb(1, 152 + 0.25 * 14);
lamb(3, 152 + 0.25 * 15);
lamb(0, 152 + 0.25 * 16);
lamb(2, 152 + 0.25 * 17);
lamb(1, 152 + 0.25 * 18);
lamb(3, 152 + 0.25 * 19);
lamb(0, 152 + 0.25 * 20);
lamb(2, 152 + 0.25 * 21);
lamb(1, 152 + 0.25 * 22);
lamb(3, 152 + 0.25 * 23);
lamb(0, 152 + 0.25 * 24);
lamb(2, 152 + 0.25 * 25);
lamb(1, 152 + 0.25 * 26);
lamb(3, 152 + 0.25 * 27);
lamb(0, 152 + 0.25 * 28);
lamb(1, 152 + 0.25 * 28);
lamb(2, 152 + 0.25 * 28);
lamb(3, 152 + 0.25 * 28);

//10
lamb(0, 160 + 0.25 * 0);
lamb(3, 160 + 0.25 * 0);
lamb(0, 160 + 0.25 * 2);
lamb(3, 160 + 0.25 * 2);
lamb(0, 160 + 0.25 * 4);
lamb(1, 160 + 0.25 * 5);
lamb(2, 160 + 0.25 * 6);
lamb(3, 160 + 0.25 * 7);
lamb(2, 160 + 0.25 * 8);
lamb(1, 160 + 0.25 * 9);
lamb(0, 160 + 0.25 * 10);
lamb(1, 160 + 0.25 * 11);
lamb(2, 160 + 0.25 * 12);
lamb(3, 160 + 0.25 * 13);
lamb(2, 160 + 0.25 * 14);
lamb(1, 160 + 0.25 * 15);
lamb(0, 160 + 0.25 * 16);
lamb(1, 160 + 0.25 * 17);
lamb(2, 160 + 0.25 * 18);
lamb(3, 160 + 0.25 * 19);
lamb(2, 160 + 0.25 * 20);
lamb(1, 160 + 0.25 * 21);
lamb(0, 160 + 0.25 * 22);
lamb(1, 160 + 0.25 * 23);
lamb(2, 160 + 0.25 * 24);
lamb(3, 160 + 0.25 * 25);
lamb(2, 160 + 0.25 * 26);
lamb(1, 160 + 0.25 * 27);
lamb(0, 160 + 0.25 * 28);
lamb(1, 160 + 0.25 * 28);
lamb(2, 160 + 0.25 * 28);
lamb(3, 160 + 0.25 * 28);

lamb(0, 168 + 0.33 * 0);
lamb(3, 168 + 0.33 * 0);
lamb(1, 168 + 0.33 * 1);
lamb(2, 168 + 0.33 * 2);
lamb(0, 168 + 0.33 * 3);
lamb(3, 168 + 0.33 * 3);
lamb(2, 168 + 0.33 * 4);
lamb(1, 168 + 0.33 * 5);
lamb(0, 168 + 0.33 * 6);
lamb(3, 168 + 0.33 * 6);
lamb(1, 168 + 0.33 * 7);
lamb(2, 168 + 0.33 * 8);
lamb(0, 168 + 0.33 * 9);
lamb(3, 168 + 0.33 * 9);
lamb(2, 168 + 0.33 * 10);
lamb(1, 168 + 0.33 * 11);

lamb(0, 172 + 0.5 * 0);
lamb(3, 172 + 0.5 * 0);
lamb(1, 172 + 0.5 * 1);
lamb(3, 172 + 0.5 * 1);
lamb(2, 172 + 0.5 * 2);
lamb(3, 172 + 0.5 * 2);
lamb(3, 172 + 0.5 * 3);
lamb(0, 172 + 0.5 * 4);
lamb(0, 172 + 0.5 * 5);
lamb(1, 172 + 0.5 * 5);
lamb(0, 172 + 0.5 * 6);
lamb(2, 172 + 0.5 * 6);
lamb(0, 172 + 0.5 * 7);
lamb(3, 172 + 0.5 * 7);

//11
lamb(0, 176);
lamb(1, 176);
lamb(2, 176);
lamb(3, 176);

lamb(2, 176 + 7);
lamb(3, 176 + 7);
lamb(1, 176 + 8);
lamb(2, 176 + 8);
lamb(0, 176 + 10);
lamb(1, 176 + 10);
lamb(1, 176 + 12);
lamb(2, 176 + 12);
lamb(0, 176 + 13.50);
lamb(1, 176 + 13.75);
lamb(2, 176 + 14);
lamb(3, 176 + 14.5);
lamb(3, 176 + 15);
lamb(3, 176 + 15.5);

//12
lamb(2, 192 + 0.5 * 0);
lamb(3, 192 + 0.5 * 0);
lamb(0, 192 + 0.5 * 4);
lamb(1, 192 + 0.5 * 4);
lamb(2, 192 + 0.5 * 4);
lamb(3, 192 + 0.5 * 4);
lamb(2, 192 + 0.5 * 5);
lamb(3, 192 + 0.5 * 5);
lamb(2, 192 + 0.5 * 10);
lamb(3, 192 + 0.5 * 10);
lamb(0, 192 + 0.5 * 12);
lamb(1, 192 + 0.5 * 12);
lamb(2, 192 + 0.5 * 12);
lamb(3, 192 + 0.5 * 12);
lamb(2, 192 + 0.5 * 13);
lamb(3, 192 + 0.5 * 13);

lamb(0, 200 + 0.5 * 0);
lamb(1, 200 + 0.5 * 1);
lamb(2, 200 + 0.5 * 2);
lamb(0, 200 + 0.5 * 3);
lamb(1, 200 + 0.5 * 4);
lamb(3, 200 + 0.5 * 5);
lamb(0, 200 + 0.5 * 6);
lamb(2, 200 + 0.5 * 7);
lamb(3, 200 + 0.5 * 8);
lamb(1, 200 + 0.5 * 9);
lamb(2, 200 + 0.5 * 10);
lamb(3, 200 + 0.5 * 11);
lamb(2 + 0, 206 + 0.5 * 0);
lamb(2 + 1, 206 + 0.5 * 0);
lamb(2 + 0, 206 + 0.5 * 1);
lamb(2 + 1, 206 + 0.5 * 1);
lamb(2 + 0, 206 + 0.5 * 2);
lamb(2 + 1, 206 + 0.5 * 2);
lamb(2 + 0, 206 + 0.5 * 3);
lamb(2 + 1, 206 + 0.5 * 3);

//13
lamb(0, 208 + 0.25 * 0);
lamb(1, 208 + 0.25 * 0);
lamb(0, 208 + 0.25 * 4);
lamb(2, 208 + 0.25 * 5);
lamb(0, 208 + 0.25 * 6);
lamb(2, 208 + 0.25 * 7);
lamb(1, 208 + 0.25 * 8);
lamb(3, 208 + 0.25 * 9);
lamb(1, 208 + 0.25 * 10);
lamb(3, 208 + 0.25 * 11);
lamb(0, 208 + 0.25 * 12);
lamb(1, 208 + 0.25 * 12);
lamb(2, 208 + 0.25 * 14);
lamb(3, 208 + 0.25 * 14);
lamb(0, 208 + 0.25 * 16);
lamb(1, 208 + 0.25 * 17);
lamb(0, 208 + 0.25 * 18);
lamb(1, 208 + 0.25 * 19);
lamb(1, 208 + 0.25 * 20);
lamb(2, 208 + 0.25 * 21);
lamb(1, 208 + 0.25 * 22);
lamb(2, 208 + 0.25 * 23);
lamb(2, 208 + 0.25 * 24);
lamb(3, 208 + 0.25 * 25);
lamb(2, 208 + 0.25 * 26);
lamb(3, 208 + 0.25 * 27);
lamb(1, 208 + 0.25 * 28);
lamb(2, 208 + 0.25 * 29);
lamb(1, 208 + 0.25 * 30);
lamb(2, 208 + 0.25 * 31);

lamb(0, 216 + 0.25 * 0);
lamb(1, 216 + 0.25 * 0);
lamb(2, 216 + 0.25 * 0);
lamb(3, 216 + 0.25 * 0);
lamb(3 - 0, 216 + 0.25 * 4);
lamb(3 - 2, 216 + 0.25 * 5);
lamb(3 - 0, 216 + 0.25 * 6);
lamb(3 - 2, 216 + 0.25 * 7);
lamb(3 - 1, 216 + 0.25 * 8);
lamb(3 - 3, 216 + 0.25 * 9);
lamb(3 - 1, 216 + 0.25 * 10);
lamb(3 - 3, 216 + 0.25 * 11);
lamb(3 - 0, 216 + 0.25 * 12);
lamb(3 - 1, 216 + 0.25 * 12);
lamb(3 - 2, 216 + 0.25 * 14);
lamb(3 - 3, 216 + 0.25 * 14);
lamb(3 - 0, 216 + 0.25 * 16);
lamb(3 - 1, 216 + 0.25 * 17);
lamb(3 - 0, 216 + 0.25 * 18);
lamb(3 - 1, 216 + 0.25 * 19);
lamb(3 - 1, 216 + 0.25 * 20);
lamb(3 - 2, 216 + 0.25 * 21);
lamb(3 - 1, 216 + 0.25 * 22);
lamb(3 - 2, 216 + 0.25 * 23);
lamb(3 - 2, 216 + 0.25 * 24);
lamb(3 - 3, 216 + 0.25 * 25);
lamb(3 - 2, 216 + 0.25 * 26);
lamb(3 - 3, 216 + 0.25 * 27);
lamb(3 - 1, 216 + 0.25 * 28);
lamb(3 - 2, 216 + 0.25 * 29);
lamb(3 - 1, 216 + 0.25 * 30);
lamb(3 - 2, 216 + 0.25 * 31);

//14
lamb(3, 224 + 0.25 * 0);
lamb(2, 224 + 0.25 * 2);
lamb(3, 224 + 0.25 * 2);
lamb(2, 224 + 0.25 * 4);
lamb(3, 224 + 0.25 * 4);
lamb(0, 224 + 0.25 * 8);
lamb(1, 224 + 0.25 * 9);
lamb(2, 224 + 0.25 * 10);
lamb(3, 224 + 0.25 * 11);
lamb(1, 224 + 0.25 * 12);
lamb(2, 224 + 0.25 * 14);

lamb(0, 224 + 0.25 * 16);
lamb(0, 224 + 0.25 * 18);
lamb(1, 224 + 0.25 * 18);
lamb(0, 224 + 0.25 * 20);
lamb(1, 224 + 0.25 * 20);
lamb(3, 224 + 0.25 * 24);
lamb(2, 224 + 0.25 * 25);
lamb(1, 224 + 0.25 * 26);
lamb(0, 224 + 0.25 * 27);
lamb(3, 224 + 0.25 * 28);
lamb(2, 224 + 0.25 * 29);
lamb(1, 224 + 0.25 * 30);
lamb(0, 224 + 0.25 * 31);
lamb(3, 224 + 0.25 * 32);
lamb(2, 224 + 0.25 * 34);
lamb(3, 224 + 0.25 * 34);
lamb(1, 224 + 0.25 * 36);
lamb(2, 224 + 0.25 * 36);
lamb(3, 224 + 0.25 * 36);
lamb(0, 224 + 0.25 * 40);
lamb(1, 224 + 0.25 * 41);
lamb(2, 224 + 0.25 * 42);
lamb(3, 224 + 0.25 * 43);
lamb(1, 224 + 0.25 * 44);
lamb(2, 224 + 0.25 * 46);
lamb(0, 224 + 0.25 * 48);
lamb(0, 224 + 0.25 * 50);
lamb(1, 224 + 0.25 * 50);
lamb(0, 224 + 0.25 * 52);
lamb(1, 224 + 0.25 * 52);
lamb(2, 224 + 0.25 * 52);
lamb(3, 224 + 0.25 * 56);
lamb(2, 224 + 0.25 * 58);
lamb(3, 224 + 0.25 * 58);
lamb(1, 224 + 0.25 * 60);
lamb(2, 224 + 0.25 * 60);
lamb(3, 224 + 0.25 * 60);

//15
lamb(0, 248 + 0.25 * 0);
lamb(0, 248 + 0.25 * 1);
lamb(0, 248 + 0.25 * 2);
lamb(0, 248 + 0.25 * 3);
lamb(0, 248 + 0.25 * 4);
lamb(0, 248 + 0.25 * 5);
lamb(0, 248 + 0.25 * 6);
lamb(0, 248 + 0.25 * 7);
lamb(0, 248 + 0.25 * 8);
lamb(0, 248 + 0.25 * 9);
lamb(0, 248 + 0.25 * 10);
lamb(0, 248 + 0.25 * 11);
lamb(0, 248 + 0.25 * 12);
lamb(1, 248 + 0.25 * 13);
lamb(2, 248 + 0.25 * 14);
lamb(3, 248 + 0.25 * 15);

lamb(0, 252);
lamb(1, 252);
lamb(2, 252);
lamb(3, 252);
lamb(1, 252 + 0.5 * 1);
lamb(2, 252 + 0.5 * 1);
lamb(3, 252 + 0.5 * 1);
lamb(0, 252 + 0.5 * 2);
lamb(1, 252 + 0.5 * 2);
lamb(2, 252 + 0.5 * 2);
lamb(3, 252 + 0.5 * 2);
lamb(0, 252 + 0.5 * 3);
lamb(2, 252 + 0.5 * 3);
lamb(3, 252 + 0.5 * 3);
lamb(0, 252 + 0.5 * 4);
lamb(1, 252 + 0.5 * 4);
lamb(2, 252 + 0.5 * 4);
lamb(3, 252 + 0.5 * 4);
lamb(0, 252 + 0.5 * 5);
lamb(1, 252 + 0.5 * 5);
lamb(3, 252 + 0.5 * 5);
lamb(0, 252 + 0.5 * 6);
lamb(1, 252 + 0.5 * 6);
lamb(2, 252 + 0.5 * 6);
lamb(3, 252 + 0.5 * 6);
lamb(0, 252 + 0.5 * 7);
lamb(1, 252 + 0.5 * 7);
lamb(2, 252 + 0.5 * 7);

//16
lamb(3, 256);
lamb(0, 257);
lamb(1, 257);
lamb(2, 257);
lamb(3, 257);

lamb(0, 259);
lamb(1, 259.5);
lamb(2, 260);
lamb(3, 260.5);

lamb(2, 261.5);
lamb(1, 262.5);
lamb(0, 263.5);

lamb(0, 264);
lamb(0, 265);
lamb(1, 265.5);
lamb(2, 265.5);
lamb(3, 265.5);

lamb(3, 268);
lamb(3, 268.75);
lamb(2, 269);
lamb(2, 269.75);
lamb(1, 270);
lamb(1, 270.75);
lamb(0, 271);

//17
lamb(0, 272 + 0.5 * 0);
lamb(1, 272 + 0.5 * 1);
lamb(0, 272 + 0.5 * 2);
lamb(1, 272 + 0.5 * 3);
lamb(1, 272 + 0.5 * 6);
lamb(3, 272 + 0.5 * 6);
lamb(2, 272 + 0.5 * 8);
lamb(3, 272 + 0.5 * 9);
lamb(2, 272 + 0.5 * 10);
lamb(3, 272 + 0.5 * 11);
lamb(0, 272 + 0.5 * 13);
lamb(0, 272 + 0.5 * 14);
lamb(2, 272 + 0.5 * 14);

lamb(0, 280 + 0.25 * 0);
lamb(1, 280 + 0.25 * 1);
lamb(2, 280 + 0.25 * 2);
lamb(3, 280 + 0.25 * 3);
lamb(0, 280 + 0.25 * 4);
lamb(1, 280 + 0.25 * 5);
lamb(2, 280 + 0.25 * 6);
lamb(3, 280 + 0.25 * 7);
lamb(0, 280 + 0.25 * 8);
lamb(1, 280 + 0.25 * 9);
lamb(2, 280 + 0.25 * 10);
lamb(3, 280 + 0.25 * 11);
lamb(0, 280 + 0.25 * 12);
lamb(1, 280 + 0.25 * 13);
lamb(2, 280 + 0.25 * 14);
lamb(3, 280 + 0.25 * 15);

lamb(0, 284 + 0.5 * 0);
lamb(1, 284 + 0.5 * 0);
lamb(0, 284 + 0.5 * 1);
lamb(1, 284 + 0.5 * 1);
lamb(0, 284 + 0.5 * 2);
lamb(2, 284 + 0.5 * 2);
lamb(0, 284 + 0.5 * 3);
lamb(3, 284 + 0.5 * 3);
lamb(0, 284 + 0.5 * 5);
lamb(1, 284 + 0.5 * 5);
lamb(3, 284 + 0.5 * 5);
lamb(0, 284 + 0.5 * 6);
lamb(1, 284 + 0.5 * 6);
lamb(2, 284 + 0.5 * 6);
lamb(3, 284 + 0.5 * 6);

//18
lamb(0, 288 + 0.25 * 4);
lamb(1, 288 + 0.25 * 4);
lamb(2, 288 + 0.25 * 4);
lamb(3, 288 + 0.25 * 4);
lamb(0, 288 + 0.25 * 7);
lamb(2, 288 + 0.25 * 8);
lamb(3, 288 + 0.25 * 13);
lamb(2, 288 + 0.25 * 14);
lamb(0, 288 + 0.25 * 16);
lamb(1, 288 + 0.25 * 16);
lamb(1, 288 + 0.25 * 20);
lamb(2, 288 + 0.25 * 21);
lamb(2, 288 + 0.25 * 22);
lamb(3, 288 + 0.25 * 22);
lamb(2, 288 + 0.25 * 26);
lamb(1, 288 + 0.25 * 27);
lamb(0, 288 + 0.25 * 28);
lamb(0, 288 + 0.25 * 30);
lamb(1, 288 + 0.25 * 30);

lamb(0, 288 + 0.25 * 32);
lamb(1, 288 + 0.25 * 33);
lamb(2, 288 + 0.25 * 34);
lamb(3, 288 + 0.25 * 35);
lamb(0, 288 + 0.25 * 36);
lamb(1, 288 + 0.25 * 36);
lamb(0, 288 + 0.25 * 38);
lamb(1, 288 + 0.25 * 38);
lamb(0, 288 + 0.25 * 40);
lamb(1, 288 + 0.25 * 41);
lamb(2, 288 + 0.25 * 42);
lamb(3, 288 + 0.25 * 43);
lamb(0, 288 + 0.25 * 44);
lamb(1, 288 + 0.25 * 44);
lamb(0, 288 + 0.25 * 46);
lamb(1, 288 + 0.25 * 46);

lamb(1, 288 + 0.25 * 48);
lamb(2, 288 + 0.25 * 49);
lamb(1, 288 + 0.25 * 50);
lamb(2, 288 + 0.25 * 51);
lamb(3, 288 + 0.25 * 52);
lamb(2, 288 + 0.25 * 53);
lamb(1, 288 + 0.25 * 54);
lamb(0, 288 + 0.25 * 55);
lamb(3, 288 + 0.25 * 56);
lamb(2, 288 + 0.25 * 57);
lamb(1, 288 + 0.25 * 58);
lamb(0, 288 + 0.25 * 59);
lamb(0, 288 + 0.25 * 60);
lamb(1, 288 + 0.25 * 60);
lamb(0, 288 + 0.25 * 62);

//19
lamb(0, 304 + 0.1666 * 0);
lamb(1, 304 + 0.1666 * 1);
lamb(2, 304 + 0.1666 * 2);
lamb(3, 304 + 0.1666 * 3);
lamb(2, 304 + 0.1666 * 4);
lamb(1, 304 + 0.1666 * 5);
lamb(0, 304 + 0.1666 * 6);
lamb(1, 304 + 0.1666 * 7);
lamb(2, 304 + 0.1666 * 8);
lamb(3, 304 + 0.1666 * 9);
lamb(2, 304 + 0.1666 * 10);
lamb(1, 304 + 0.1666 * 11);
lamb(0, 304 + 0.1666 * 12);
lamb(1, 304 + 0.1666 * 13);
lamb(2, 304 + 0.1666 * 14);
lamb(3, 304 + 0.1666 * 15);
lamb(2, 304 + 0.1666 * 16);
lamb(1, 304 + 0.1666 * 17);
lamb(0, 304 + 0.1666 * 18);
lamb(1, 304 + 0.1666 * 19);
lamb(2, 304 + 0.1666 * 20);
lamb(3, 304 + 0.1666 * 21);
lamb(2, 304 + 0.1666 * 22);
lamb(1, 304 + 0.1666 * 23);

lamb(0, 308);
lamb(1, 308.5);
lamb(2, 308.5);
lamb(3, 308.5);

lamb(2, 309 + 0.33 * 0);
lamb(1, 309 + 0.33 * 1);
lamb(0, 309 + 0.33 * 2);
lamb(3, 309 + 0.33 * 3);
lamb(2, 309 + 0.33 * 4);
lamb(1, 309 + 0.33 * 5);
lamb(2, 309 + 0.33 * 6);
lamb(1, 309 + 0.33 * 7);
lamb(0, 309 + 0.33 * 8);

lamb(1, 312);
lamb(2, 312);
lamb(3, 312);

lamb(3, 313 + 0.25 * 0);
lamb(2, 313 + 0.25 * 1);
lamb(1, 313 + 0.25 * 2);
lamb(0, 313 + 0.25 * 3);
lamb(3, 313 + 0.25 * 4);
lamb(2, 313 + 0.25 * 5);
lamb(1, 313 + 0.25 * 6);
lamb(2, 313 + 0.25 * 7);
lamb(0, 315);
lamb(1, 315);
lamb(2, 315.5);
lamb(3, 315.5);

lamb(0, 316 + 0.25 * 0);
lamb(1, 316 + 0.25 * 0);
lamb(2, 316 + 0.25 * 0);
lamb(3, 316 + 0.25 * 0);
lamb(3, 316 + 0.25 * 2);
lamb(2, 316 + 0.25 * 3);
lamb(0, 316 + 0.25 * 4);
lamb(1, 316 + 0.25 * 4);
lamb(0, 316 + 0.25 * 6);
lamb(1, 316 + 0.25 * 6);
lamb(2, 316 + 0.25 * 6);
lamb(3, 316 + 0.25 * 6);
lamb(0, 316 + 0.25 * 8);
lamb(1, 316 + 0.25 * 9);
lamb(2, 316 + 0.25 * 10);
lamb(3, 316 + 0.25 * 10);
lamb(0, 316 + 0.25 * 12);
lamb(1, 316 + 0.25 * 12);
lamb(2, 316 + 0.25 * 12);
lamb(3, 316 + 0.25 * 12);
lamb(1, 316 + 0.25 * 14);

//20
lamb(0, 320 + 0.25 * 0);
lamb(1, 320 + 0.25 * 0);
lamb(2, 320 + 0.25 * 6);
lamb(3, 320 + 0.25 * 6);
lamb(0, 320 + 0.25 * 8);
lamb(1, 320 + 0.25 * 8);
lamb(0, 320 + 0.25 * 10);
lamb(1, 320 + 0.25 * 10);
lamb(2, 320 + 0.25 * 12);
lamb(3, 320 + 0.25 * 12);
lamb(0, 320 + 0.25 * 14);
lamb(1, 320 + 0.25 * 14);
lamb(0, 320 + 0.25 * 16);
lamb(1, 320 + 0.25 * 17);
lamb(2, 320 + 0.25 * 18);
lamb(3, 320 + 0.25 * 19);
lamb(2, 320 + 0.25 * 20);
lamb(3, 320 + 0.25 * 21);
lamb(2, 320 + 0.25 * 22);
lamb(1, 320 + 0.25 * 23);
lamb(0, 320 + 0.25 * 24);
lamb(1, 320 + 0.25 * 25);
lamb(0, 320 + 0.25 * 26);
lamb(1, 320 + 0.25 * 27);
lamb(2, 320 + 0.25 * 28);
lamb(3, 320 + 0.25 * 29);

lamb(0, 320 + 0.25 * 30);
lamb(1, 320 + 0.25 * 30);
lamb(0, 320 + 0.25 * 32);
lamb(1, 320 + 0.25 * 32);
lamb(2, 320 + 0.25 * 38);
lamb(3, 320 + 0.25 * 38);
lamb(0, 320 + 0.25 * 40);
lamb(1, 320 + 0.25 * 40);
lamb(0, 320 + 0.25 * 42);
lamb(1, 320 + 0.25 * 42);
lamb(2, 320 + 0.25 * 44);
lamb(3, 320 + 0.25 * 44);
lamb(0, 320 + 0.25 * 46);
lamb(1, 320 + 0.25 * 46);
lamb(0, 320 + 0.25 * 48);
lamb(1, 320 + 0.25 * 49);
lamb(0, 320 + 0.25 * 50);
lamb(1, 320 + 0.25 * 51);
lamb(2, 320 + 0.25 * 52);
lamb(3, 320 + 0.25 * 53);
lamb(2, 320 + 0.25 * 54);
lamb(1, 320 + 0.25 * 55);
lamb(0, 320 + 0.25 * 56);
lamb(1, 320 + 0.25 * 57);
lamb(0, 320 + 0.25 * 58);
lamb(1, 320 + 0.25 * 59);
lamb(2, 320 + 0.25 * 60);
lamb(3, 320 + 0.25 * 61);

lamb(0, 320 + 0.25 * 62);
lamb(1, 320 + 0.25 * 62);

//21
lamb(0, 336 + 0.25 * 0);
lamb(1, 336 + 0.25 * 0);
lamb(2, 336 + 0.25 * 4);
lamb(3, 336 + 0.25 * 4);
lamb(0, 336 + 0.25 * 6);
lamb(1, 336 + 0.25 * 6);
lamb(0, 336 + 0.25 * 8);
lamb(1, 336 + 0.25 * 8);
lamb(2, 336 + 0.25 * 10);
lamb(3, 336 + 0.25 * 10);
lamb(0, 336 + 0.25 * 12);
lamb(1, 336 + 0.25 * 12);
lamb(2, 336 + 0.25 * 14);
lamb(3, 336 + 0.25 * 14);

lamb(3, 336 + 0.25 * 16);
lamb(2, 336 + 0.25 * 17);
lamb(1, 336 + 0.25 * 18);
lamb(0, 336 + 0.25 * 19);
lamb(1, 336 + 0.25 * 20);
lamb(0, 336 + 0.25 * 21);
lamb(1, 336 + 0.25 * 22);
lamb(2, 336 + 0.25 * 23);
lamb(3, 336 + 0.25 * 24);
lamb(2, 336 + 0.25 * 25);
lamb(3, 336 + 0.25 * 26);
lamb(2, 336 + 0.25 * 27);
lamb(1, 336 + 0.25 * 28);
lamb(0, 336 + 0.25 * 29);

lamb(2, 336 + 0.25 * 30);
lamb(3, 336 + 0.25 * 30);
lamb(0, 336 + 0.25 * 32);
lamb(1, 336 + 0.25 * 32);
lamb(0, 336 + 0.25 * 36);
lamb(1, 336 + 0.25 * 36);
lamb(2, 336 + 0.25 * 38);
lamb(3, 336 + 0.25 * 38);
lamb(2, 336 + 0.25 * 40);
lamb(3, 336 + 0.25 * 40);
lamb(0, 336 + 0.25 * 44);
lamb(1, 336 + 0.25 * 44);
lamb(2, 336 + 0.25 * 46);
lamb(3, 336 + 0.25 * 46);
lamb(0, 336 + 0.25 * 47);

lamb(3, 336 + 0.25 * 48);
lamb(2, 336 + 0.25 * 49);
lamb(3, 336 + 0.25 * 50);
lamb(2, 336 + 0.25 * 51);
lamb(1, 336 + 0.25 * 52);
lamb(0, 336 + 0.25 * 53);
lamb(1, 336 + 0.25 * 54);
lamb(0, 336 + 0.25 * 55);
lamb(1, 336 + 0.25 * 56);
lamb(2, 336 + 0.25 * 57);
lamb(3, 336 + 0.25 * 58);
lamb(2, 336 + 0.25 * 59);
lamb(3, 336 + 0.25 * 60);
lamb(2, 336 + 0.25 * 61);
lamb(1, 336 + 0.25 * 62);
lamb(0, 336 + 0.25 * 63);

//22
lamb(2, 352 + 0.5 * 0);
lamb(3, 352 + 0.5 * 0);
lamb(1, 352 + 0.5 * 1);
lamb(2, 352 + 0.5 * 1);
lamb(0, 352 + 0.5 * 2);
lamb(1, 352 + 0.5 * 2);
lamb(1, 352 + 0.5 * 3);
lamb(2, 352 + 0.5 * 3);
lamb(2, 352 + 0.5 * 4);
lamb(3, 352 + 0.5 * 4);
lamb(1, 352 + 0.5 * 5);
lamb(2, 352 + 0.5 * 5);
lamb(0, 352 + 0.5 * 6);
lamb(1, 352 + 0.5 * 6);
lamb(1, 352 + 0.5 * 7);
lamb(2, 352 + 0.5 * 7);
lamb(2, 352 + 0.5 * 8);
lamb(3, 352 + 0.5 * 8);
lamb(1, 352 + 0.5 * 9);
lamb(2, 352 + 0.5 * 9);
lamb(0, 352 + 0.5 * 10);
lamb(1, 352 + 0.5 * 10);
lamb(2, 352 + 0.5 * 11);
lamb(3, 352 + 0.5 * 11);
lamb(0, 352 + 0.5 * 12);
lamb(1, 352 + 0.5 * 12);
lamb(2, 352 + 0.5 * 13);
lamb(3, 352 + 0.5 * 13);
lamb(1, 352 + 0.5 * 14);
lamb(3, 352 + 0.5 * 14.5);
lamb(0, 352 + 0.5 * 15);
lamb(2, 352 + 0.5 * 15.5);

lamb(0, 352 + 8);
lamb(1, 352 + 8);
lamb(3, 352 + 8);
lamb(0, 352 + 9);
lamb(1, 352 + 9);
lamb(2, 352 + 9);
lamb(3, 352 + 9);
lamb(1, 352 + 10);
lamb(2, 352 + 10);
lamb(3, 352 + 10);
lamb(0, 352 + 11);
lamb(1, 352 + 11);
lamb(2, 352 + 11);
lamb(3, 352 + 11);

lamb(1, 364 + 0.25 * 0);
lamb(2, 364 + 0.25 * 1);
lamb(1, 364 + 0.25 * 2);
lamb(2, 364 + 0.25 * 3);
lamb(1, 364 + 0.25 * 4);
lamb(2, 364 + 0.25 * 5);
lamb(1, 364 + 0.25 * 6);
lamb(2, 364 + 0.25 * 7);
lamb(1, 364 + 0.25 * 8);
lamb(2, 364 + 0.25 * 9);
lamb(1, 364 + 0.25 * 10);
lamb(2, 364 + 0.25 * 11);
lamb(1, 364 + 0.25 * 12);
lamb(2, 364 + 0.25 * 13);
lamb(1, 364 + 0.25 * 14);
lamb(2, 364 + 0.25 * 15);

//23
lamb(0, 368);
lamb(1, 368);
lamb(3, 368);

lamb(0, 368 + 0.25 * 4);
lamb(1, 368 + 0.25 * 5);
lamb(2, 368 + 0.25 * 6);
lamb(3, 368 + 0.25 * 7);
lamb(1, 368 + 0.25 * 8);
lamb(0, 368 + 0.25 * 9);
lamb(1, 368 + 0.25 * 10);
lamb(3, 368 + 0.25 * 11);
lamb(2, 368 + 0.25 * 12);
lamb(1, 368 + 0.25 * 13);
lamb(0, 368 + 0.25 * 14);
lamb(3, 368 + 0.25 * 15);
lamb(2, 368 + 0.25 * 16);
lamb(3, 368 + 0.25 * 17);
lamb(0, 368 + 0.25 * 18);
lamb(1, 368 + 0.25 * 19);
lamb(2, 368 + 0.25 * 20);
lamb(3, 368 + 0.25 * 21);
lamb(2, 368 + 0.25 * 22);
lamb(1, 368 + 0.25 * 23);
lamb(2, 368 + 0.25 * 24);
lamb(3, 368 + 0.25 * 25);
lamb(2, 368 + 0.25 * 26);
lamb(1, 368 + 0.25 * 27);
lamb(0, 368 + 0.25 * 28);
lamb(1, 368 + 0.25 * 29);
lamb(3, 368 + 0.25 * 30);
lamb(2, 368 + 0.25 * 31);

//24
lamb(0, 376);
lamb(1, 376);
lamb(3, 376);